using Discord.Commands;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;
using System;
using System.Net;
using Amazon.Translate;
using Amazon.Translate.Model;
using System.Composition;
using Council.DiscordBot.Core;
using AWS.Logging.Contract;
using Discord.WebSocket;
using Discord;

namespace DiscordBot.Commands.Commands;

public class TranslateService : ModuleBase<SocketCommandContext>
{
    [Import]
    private IServiceLoggerFactory LogFactory { get; set; }
    private ILogger Logger { get; }

    // Use a flag emoji as a key to represent the language in the map
    private readonly Dictionary<string, string> _emojiLanguageMap = new Dictionary<string, string>
    {
        {"ğŸ‡¦ğŸ‡ª", "ar"}, // Arabic
        {"ğŸ‡§ğŸ‡©", "bn"}, // Bengali
        {"ğŸ‡¨ğŸ‡¿", "cs"}, // Czech
        {"ğŸ‡©ğŸ‡°", "da"}, // Danish
        {"ğŸ‡©ğŸ‡ª", "de"}, // German
        {"ğŸ‡¬ğŸ‡·", "el"}, // Greek
        {"ğŸ‡¦ğŸ‡º", "en"}, // English
        {"ğŸ‡¬ğŸ‡§", "en"}, // English
        {"ğŸ‡ºğŸ‡¸", "en"}, // English
        {"ğŸ‡ªğŸ‡¸", "es"}, // Spanish
        {"ğŸ‡²ğŸ‡½", "es"}, // Spanish
        {"ğŸ‡¦ğŸ‡·", "es"}, // Spanish
        {"ğŸ‡ªğŸ‡ª", "et"}, // Estonian
        {"ğŸ‡«ğŸ‡®", "fi"}, // Finnish
        {"ğŸ‡«ğŸ‡·", "fr"}, // French
        {"ğŸ‡®ğŸ‡±", "he"}, // Hebrew
        {"ğŸ‡®ğŸ‡³", "hi"}, // Hindi
        {"ğŸ‡­ğŸ‡º", "hu"}, // Hungarian
        {"ğŸ‡®ğŸ‡©", "id"}, // Indonesian
        {"ğŸ‡®ğŸ‡¹", "it"}, // Italian
        {"ğŸ‡¯ğŸ‡µ", "ja"}, // Japanese
        {"ğŸ‡°ğŸ‡·", "ko"}, // Korean
        {"ğŸ‡²ğŸ‡¸", "ms"}, // Malay
        {"ğŸ‡³ğŸ‡´", "no"}, // Norwegian
        {"ğŸ‡®ğŸ‡·", "fa"}, // Persian
        {"ğŸ‡µğŸ‡±", "pl"}, // Polish
        {"ğŸ‡§ğŸ‡·", "pt"}, // Portuguese
        {"ğŸ‡µğŸ‡¹", "pt"}, // Portuguese
        {"ğŸ‡·ğŸ‡´", "ro"}, // Romanian
        {"ğŸ‡·ğŸ‡º", "ru"}, // Russian
        {"ğŸ‡¸ğŸ‡¦", "ar"}, // Arabic
        {"ğŸ‡¸ğŸ‡ª", "sv"}, // Swedish
        {"ğŸ‡¹ğŸ‡­", "th"}, // Thai
        {"ğŸ‡¹ğŸ‡·", "tr"}, // Turkish
        {"ğŸ‡µğŸ‡°", "ur"}, // Urdu
        {"ğŸ‡»ğŸ‡³", "vi"}, // Vietnamese
        {"ğŸ‡¨ğŸ‡³", "zh"}, // Chinese Simplified
        {"ğŸ‡¹ğŸ‡¼", "zh-TW"}, // Chinese Traditional
        // Additional languages without a country flag
        {"ğŸ‡ªğŸ‡º", "nl"}, // Dutch for European Union flag
        // ... Add any additional mappings as necessary
    };



    [DiscordEventHandler("ReactionAdded")]
    public async Task OnReactionAddedAsync(Cacheable<IUserMessage, ulong> cacheableMessage, ISocketMessageChannel channel, SocketReaction reaction)
    {
        // Check if the reaction is a flag emoji and get the corresponding language code
        if (_emojiLanguageMap.TryGetValue(reaction.Emote.Name, out var languageCode))
        {
            var message = await cacheableMessage.GetOrDownloadAsync();
            var textToTranslate = message.Content;
            using var client = new AmazonTranslateClient();
            try
            {
                // Perform translation
                var translateRequest = new TranslateTextRequest
                {
                    Text = textToTranslate,
                    TargetLanguageCode = languageCode,
                    SourceLanguageCode = "auto"
                };
                var result = await client.TranslateTextAsync(translateRequest);

                // Send the translated message
                if (result.HttpStatusCode == HttpStatusCode.OK)
                {
                    await channel.SendMessageAsync(result.TranslatedText);
                }
                else
                {
                    Logger.LogError("Translation failed with status code: {StatusCode}", result.HttpStatusCode);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Exception occurred during translation");
            }
        }
    }

    public TranslateService()
    {
        Logger = LogFactory?.GetLogger(nameof(TranslateService));
    }
}
