AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation for an EC2 Auto Scaling setup for a Discord bot.

Parameters:
  AMIId:
    Description: AMI ID for the EC2 instance.
    Type: String
  InstanceType:
    Description: EC2 instance type.
    Type: String
    Default: t2.micro
  VPCId:
    Description: VPC ID where the instance will be launched.
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Description: Subnet ID(s) where the instance will be launched.
    Type: List<AWS::EC2::Subnet::Id>
  ArtifactBucket:
    Description: S3 bucket name where the bot artifact is stored.
    Type: String
  ArtifactKey:
    Description: S3 object key for the bot artifact.
    Type: String
  TokenName:
    Description: Name of discord bot token secret
    Type: String
  BotServiceName:
    Description: The name of the bot service.
    Type: String
    Default: discordbot
  TestingIpAddress:
    Description: Testing IP for dashboard access
    Type: String

Resources:

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-evidence-bucket'
      VersioningConfiguration:
        Status: Enabled
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Policies:
        - PolicyName: BotEC2Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
              - Effect: Allow
                Action:
                  - logs:*
                  - lambda:*
                  - dynamodb:*
                  - translate:*
                  - comprehend:*
                  - s3:*
                  - secretsmanager:*
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
              - Effect: Allow
                Action: es:*
                Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/council-es/*

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EC2Role

  BotLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMIId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroups:
        - !GetAtt EC2SecurityGroup.GroupId
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            yum update -y
            
            rm -rf /usr/share/dotnet
            rm -rf ~/.dotnet
            rm -f /etc/profile.d/dotnet.sh
            
            sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
            sudo yum install -y dotnet-sdk-7.0
            
            # Install aws-cli
            yum install -y aws-cli
            
            aws s3 cp s3://${ArtifactBucket}/${ArtifactKey} /tmp/${BotServiceName}.zip
            unzip /tmp/${BotServiceName}.zip -d /opt/${BotServiceName}/
            # Setup your bot as a service
            cat <<EOF > /etc/systemd/system/${BotServiceName}.service
            [Unit]
            Description=Discord Bot Service
            After=network.target
            
            [Service]
            Environment=TOKENNAME=${TokenName}
            Environment=AWS_DEFAULT_REGION=${AWS::Region}
            Environment=EVIDENCE_BUCKET=${BucketName}
            Environment=ES_ENDPOINT=${ESEndpoint}
            WorkingDirectory=/opt/${BotServiceName}
            ExecStart=/usr/bin/dotnet /opt/${BotServiceName}/DiscordBot.Service.dll
            Restart=always
            SyslogIdentifier=${BotServiceName}
            
            [Install]
            WantedBy=multi-user.target
            EOF
            systemctl daemon-reload
            systemctl enable ${BotServiceName}
            systemctl start ${BotServiceName}
          - ESEndpoint: !GetAtt ElasticsearchDomain.DomainEndpoint
            BucketName: !Ref S3Bucket

  BotAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '0'
        MaxBatchSize: '1'
        PauseTime: PT3M5S
        WaitOnResourceSignals: false
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
    Properties:
      LaunchConfigurationName: !Ref BotLaunchConfiguration
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: DiscordBotInstance
          PropagateAtLaunch: 'true'
  
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for EC2 instance running Discord Bot'
  
  ElasticsearchKMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: 'KMS key for Elasticsearch node-to-node encryption'
      KeyPolicy:
        Version: '2012-10-17'
        Id: 'key-default-1'
        Statement:
        - Sid: 'Enable IAM User Permissions'
          Effect: 'Allow'
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: 'kms:*'
          Resource: '*'
        - Sid: 'Allow access through AWS Elasticsearch'
          Effect: 'Allow'
          Principal:
            Service: 'es.amazonaws.com'
          Action:
            - 'kms:Encrypt'
            - 'kms:Decrypt'
            - 'kms:ReEncrypt*'
            - 'kms:GenerateDataKey*'
            - 'kms:CreateGrant'
            - 'kms:DescribeKey'
          Resource: '*'
        - Sid: 'Allow EC2 instance to use the KMS key'
          Effect: 'Allow'
          Principal:
            AWS: !GetAtt EC2Role.Arn
          Action:
            - 'kms:Encrypt'
            - 'kms:Decrypt'
            - 'kms:ReEncrypt*'
            - 'kms:GenerateDataKey*'
            - 'kms:DescribeKey'
          Resource: '*'
         
  ElasticsearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: council-es
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: !Ref ElasticsearchKMSKey
      ClusterConfig:
        InstanceType: t3.small.search
        InstanceCount: 1
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/${EC2Role}
            Action: es:ESHttp*
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: es:ESHttp*
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
            Condition:
              IpAddress:
                aws:SourceIP: !Ref TestingIpAddress
Outputs:
  BotAutoScalingGroupName:
    Description: Auto Scaling Group Name for the Discord Bot
    Value: !Ref BotAutoScalingGroup
